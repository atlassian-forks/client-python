# coding: utf-8

"""
    An API to insert and retrieve metadata on cloud artifacts.

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from grafeas.api_client import ApiClient


class GrafeasApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def grafeas_create_note(self, parent, body, **kwargs):  # noqa: E501
        """Creates a new `Note`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_create_note(parent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This field contains the project Id for example: \"project/{project_id} (required)
        :param ApiNote body: The Note to be inserted (required)
        :param str note_id: The ID to use for this note.
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_create_note_with_http_info(parent, body, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_create_note_with_http_info(parent, body, **kwargs)  # noqa: E501
            return data

    def grafeas_create_note_with_http_info(self, parent, body, **kwargs):  # noqa: E501
        """Creates a new `Note`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_create_note_with_http_info(parent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This field contains the project Id for example: \"project/{project_id} (required)
        :param ApiNote body: The Note to be inserted (required)
        :param str note_id: The ID to use for this note.
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent', 'body', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_create_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `grafeas_create_note`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `grafeas_create_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in params:
            path_params['parent'] = params['parent']  # noqa: E501

        query_params = []
        if 'note_id' in params:
            query_params.append(('noteId', params['note_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{parent=projects/*}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_create_occurrence(self, parent, body, **kwargs):  # noqa: E501
        """Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_create_occurrence(parent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This field contains the project Id for example: \"projects/{project_id}\" (required)
        :param ApiOccurrence body: The occurrence to be inserted. (required)
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_create_occurrence_with_http_info(parent, body, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_create_occurrence_with_http_info(parent, body, **kwargs)  # noqa: E501
            return data

    def grafeas_create_occurrence_with_http_info(self, parent, body, **kwargs):  # noqa: E501
        """Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_create_occurrence_with_http_info(parent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This field contains the project Id for example: \"projects/{project_id}\" (required)
        :param ApiOccurrence body: The occurrence to be inserted. (required)
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_create_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `grafeas_create_occurrence`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `grafeas_create_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in params:
            path_params['parent'] = params['parent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{parent=projects/*}/occurrences', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_create_operation(self, parent, body, **kwargs):  # noqa: E501
        """Creates a new `Operation`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_create_operation(parent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: The projectId that this operation should be created under. (required)
        :param ApiCreateOperationRequest body: (required)
        :return: GooglelongrunningOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_create_operation_with_http_info(parent, body, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_create_operation_with_http_info(parent, body, **kwargs)  # noqa: E501
            return data

    def grafeas_create_operation_with_http_info(self, parent, body, **kwargs):  # noqa: E501
        """Creates a new `Operation`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_create_operation_with_http_info(parent, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: The projectId that this operation should be created under. (required)
        :param ApiCreateOperationRequest body: (required)
        :return: GooglelongrunningOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_create_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `grafeas_create_operation`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `grafeas_create_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in params:
            path_params['parent'] = params['parent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{parent=projects/*}/operations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GooglelongrunningOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_delete_note(self, name, **kwargs):  # noqa: E501
        """Deletes the given `Note` from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_delete_note(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_delete_note_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_delete_note_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def grafeas_delete_note_with_http_info(self, name, **kwargs):  # noqa: E501
        """Deletes the given `Note` from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_delete_note_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_delete_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_delete_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/notes/*}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_delete_occurrence(self, name, **kwargs):  # noqa: E501
        """Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_delete_occurrence(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence in the form of \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_delete_occurrence_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_delete_occurrence_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def grafeas_delete_occurrence_with_http_info(self, name, **kwargs):  # noqa: E501
        """Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_delete_occurrence_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence in the form of \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\" (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_delete_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_delete_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/occurrences/*}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_get_note(self, name, **kwargs):  # noqa: E501
        """Returns the requested `Note`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_get_note(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\" (required)
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_get_note_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_get_note_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def grafeas_get_note_with_http_info(self, name, **kwargs):  # noqa: E501
        """Returns the requested `Note`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_get_note_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\" (required)
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_get_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_get_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/notes/*}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_get_occurrence(self, name, **kwargs):  # noqa: E501
        """Returns the requested `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_get_occurrence(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\" (required)
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_get_occurrence_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_get_occurrence_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def grafeas_get_occurrence_with_http_info(self, name, **kwargs):  # noqa: E501
        """Returns the requested `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_get_occurrence_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\" (required)
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_get_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_get_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/occurrences/*}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_get_occurrence_note(self, name, **kwargs):  # noqa: E501
        """Gets the `Note` attached to the given `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_get_occurrence_note(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\" (required)
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_get_occurrence_note_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_get_occurrence_note_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def grafeas_get_occurrence_note_with_http_info(self, name, **kwargs):  # noqa: E501
        """Gets the `Note` attached to the given `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_get_occurrence_note_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\" (required)
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_get_occurrence_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_get_occurrence_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/occurrences/*}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_list_note_occurrences(self, name, **kwargs):  # noqa: E501
        """Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_list_note_occurrences(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name field will contain the note name for example:   \"provider/{provider_id}/notes/{note_id}\" (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListNoteOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_list_note_occurrences_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_list_note_occurrences_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def grafeas_list_note_occurrences_with_http_info(self, name, **kwargs):  # noqa: E501
        """Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_list_note_occurrences_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name field will contain the note name for example:   \"provider/{provider_id}/notes/{note_id}\" (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListNoteOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'filter', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_list_note_occurrences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_list_note_occurrences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/notes/*}/occurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListNoteOccurrencesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_list_notes(self, parent, **kwargs):  # noqa: E501
        """Lists all `Notes` for a given project.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_list_notes(parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This field contains the project ID for example: \"projects/{project_id}\". (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_list_notes_with_http_info(parent, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_list_notes_with_http_info(parent, **kwargs)  # noqa: E501
            return data

    def grafeas_list_notes_with_http_info(self, parent, **kwargs):  # noqa: E501
        """Lists all `Notes` for a given project.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_list_notes_with_http_info(parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This field contains the project ID for example: \"projects/{project_id}\". (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent', 'filter', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_list_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `grafeas_list_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in params:
            path_params['parent'] = params['parent']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{parent=projects/*}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListNotesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_list_occurrences(self, parent, **kwargs):  # noqa: E501
        """Lists active `Occurrences` for a given project matching the filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_list_occurrences(parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This contains the project Id for example: projects/{project_id}. (required)
        :param str filter: The filter expression.
        :param int page_size: Number of occurrences to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_list_occurrences_with_http_info(parent, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_list_occurrences_with_http_info(parent, **kwargs)  # noqa: E501
            return data

    def grafeas_list_occurrences_with_http_info(self, parent, **kwargs):  # noqa: E501
        """Lists active `Occurrences` for a given project matching the filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_list_occurrences_with_http_info(parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent: This contains the project Id for example: projects/{project_id}. (required)
        :param str filter: The filter expression.
        :param int page_size: Number of occurrences to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent', 'filter', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_list_occurrences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `grafeas_list_occurrences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in params:
            path_params['parent'] = params['parent']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{parent=projects/*}/occurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListOccurrencesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_update_note(self, name, body, **kwargs):  # noqa: E501
        """Updates an existing `Note`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_update_note(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\". (required)
        :param ApiNote body: The updated note. (required)
        :param list[str] update_mask: The fields to update.
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_update_note_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_update_note_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def grafeas_update_note_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """Updates an existing `Note`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_update_note_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\". (required)
        :param ApiNote body: The updated note. (required)
        :param list[str] update_mask: The fields to update.
        :return: ApiNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body', 'update_mask']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_update_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_update_note`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `grafeas_update_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'update_mask' in params:
            query_params.append(('updateMask', params['update_mask']))  # noqa: E501
            collection_formats['updateMask'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/notes/*}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_update_occurrence(self, name, body, **kwargs):  # noqa: E501
        """Updates an existing occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_update_occurrence(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\". (required)
        :param ApiOccurrence body: The updated occurrence. (required)
        :param list[str] update_mask: The fields to update.
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_update_occurrence_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_update_occurrence_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def grafeas_update_occurrence_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """Updates an existing occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_update_occurrence_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\". (required)
        :param ApiOccurrence body: The updated occurrence. (required)
        :param list[str] update_mask: The fields to update.
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body', 'update_mask']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_update_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_update_occurrence`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `grafeas_update_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'update_mask' in params:
            query_params.append(('updateMask', params['update_mask']))  # noqa: E501
            collection_formats['updateMask'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/occurrences/*}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grafeas_update_operation(self, name, body, **kwargs):  # noqa: E501
        """Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_update_operation(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the Operation. Should be of the form \"projects/{provider_id}/operations/{operation_id}\". (required)
        :param ApiUpdateOperationRequest body: (required)
        :return: GooglelongrunningOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grafeas_update_operation_with_http_info(name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.grafeas_update_operation_with_http_info(name, body, **kwargs)  # noqa: E501
            return data

    def grafeas_update_operation_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grafeas_update_operation_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the Operation. Should be of the form \"projects/{provider_id}/operations/{operation_id}\". (required)
        :param ApiUpdateOperationRequest body: (required)
        :return: GooglelongrunningOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grafeas_update_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `grafeas_update_operation`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `grafeas_update_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1alpha1/{name=projects/*/operations/*}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GooglelongrunningOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
